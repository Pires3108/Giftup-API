name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: crud
          POSTGRES_USER: nicolas
          POSTGRES_PASSWORD: SuaSenhaSegura
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore APICRUD/APICRUD.csproj

      - name: Build backend
        run: dotnet build APICRUD/APICRUD.csproj --configuration Release --no-restore

      - name: Run backend tests
        run: dotnet test APICRUD/APICRUD.csproj --configuration Release --no-build --verbosity normal
        env:
          ConnectionStrings__DefaultConnection: Host=localhost;Port=5432;Database=crud;Username=nicolas;Password=SuaSenhaSegura

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: giftup-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd giftup-frontend
          npm ci

      - name: Build frontend
        run: |
          cd giftup-frontend
          npm run build

      - name: Run frontend tests
        run: |
          cd giftup-frontend
          npm run lint

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./APICRUD
          file: ./APICRUD/Dockerfile
          push: false
          tags: apigiftup-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./giftup-frontend
          file: ./giftup-frontend/Dockerfile
          push: false
          tags: apigiftup-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          docker compose up -d --build
          sleep 30

      - name: Create database tables
        run: |
          docker compose exec -T postgres psql -U nicolas -d crud < create-tables-now.sql



      - name: Wait for services to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

      - name: Test API endpoints
        run: |
          # Test items endpoint
          curl -f http://localhost:5000/api/v1/item
          
          # Test Swagger
          curl -f http://localhost:5000/swagger/v1/swagger.json

      - name: Test frontend
        run: |
          curl -f http://localhost:5173

      - name: Cleanup
        if: always()
        run: docker compose down
          